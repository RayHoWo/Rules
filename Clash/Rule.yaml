rules:
- RULE-SET,ExclusiveD,DIRECT
- RULE-SET,Direct,DIRECT
- RULE-SET,Netflix,Netflix
- RULE-SET,Disney,Disney
- RULE-SET,YouTube,YouTube
- RULE-SET,Spotify,Spotify
- RULE-SET,TikTok,TikTok
- RULE-SET,US Media,United States
- RULE-SET,UK Media,United Kingdom
- RULE-SET,JP Media,Japan
- RULE-SET,KR Media,Korea
- RULE-SET,SG Media,Singapore
- RULE-SET,HK Media,Hong Kong
- RULE-SET,TW Media,Taiwan
- RULE-SET,WW Media,WW Media
- RULE-SET,AsianMedia,AsianMedia
- RULE-SET,PayPal,PayPal
- RULE-SET,ExclusiveWW,Proxy
- RULE-SET,WW,Proxy
- RULE-SET,Scholar,Scholar
- RULE-SET,ChinaMedia,DIRECT
- RULE-SET,China,DIRECT
- RULE-SET,ChinaIP,DIRECT
- RULE-SET,LAN,DIRECT
- GEOIP,US,United States
- GEOIP,GB,United Kingdom
- GEOIP,DE,Germany
- GEOIP,KR,Korea
- GEOIP,TW,Taiwan
- GEOIP,JP,Japan
- GEOIP,SG,Singapore
- GEOIP,HK,Hong Kong
- GEOIP,CN,DIRECT
- MATCH,Proxy

script:
  code: |
    def main(ctx, metadata):
        ruleset_action = {"ExclusiveD": "DIRECT",
            "Direct": "DIRECT",
            "Netflix": "Netflix",
            "Disney": "Disney",
            "YouTube": "YouTube",
            "Spotify": "Spotify",
            "TikTok": "TikTok",
            "US Media": "United States",
            "UK Media": "United Kingdom",
            "JP Media": "Japan",
            "KR Media": "Korea",
            "SG Media": "Singapore",
            "HK Media": "Hong Kong",
            "TW Media": "Taiwan",
            "WW Media": "WW Media",
            "AsianMedia": "AsianMedia",
            "PayPal": "PayPal",
            "ExclusiveWW": "Proxy",
            "WW": "Proxy",
            "Scholar": "Scholar",
            "ChinaMedia": "DIRECT",
            "China": "DIRECT",
            "ChinaIP": "DIRECT",
            "LAN": "DIRECT"
          }

        port = int(metadata["dst_port"])

        if metadata["network"] == "UDP":
            if port == 443:
                ctx.log('[Script] matched QUIC traffic use reject')
                return "REJECT"

        port_list = [21, 22, 23, 53, 80, 123, 143, 194, 443, 465, 587, 853, 993, 995, 998, 2052, 2053, 2082, 2083, 2086, 2095, 2096, 5222, 5228, 5229, 5230, 8080, 8443, 8880, 8888, 8889]
        if port not in port_list:
            ctx.log('[Script] not common port use direct')
            return "DIRECT"

        if metadata["dst_ip"] == "":
            metadata["dst_ip"] = ctx.resolve_ip(metadata["host"])

        for ruleset in ruleset_action:
            if ctx.rule_providers[ruleset].match(metadata):
                return ruleset_action[ruleset]

        if metadata["dst_ip"] == "":
            return "DIRECT"

        code = ctx.geoip(metadata["dst_ip"])
        if code == "CN":
            ctx.log('[Script] Geoip CN')
            return "DIRECT"

        ctx.log('[Script] FINAL')
        return "Proxy"

rule-providers:
  HomeDeviceIP:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Ruleset/HomeDeviceIP.yaml'
    path: ./Ruleset/HomeDeviceIP
    interval: 86400
  ExclusiveD:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Ruleset/ExclusiveD.yaml'
    path: ./Ruleset/ExclusiveD
    interval: 86400
  Direct:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Ruleset/Direct.yaml'
    path: ./Ruleset/Direct
    interval: 86400
  Netflix:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Ruleset/Netflix.yaml'
    path: ./Ruleset/Netflix
    interval: 86400
  Disney:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Ruleset/Disney.yaml'
    path: ./Ruleset/Disney+
    interval: 86400
  YouTube:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Ruleset/YouTube.yaml'
    path: ./Ruleset/YouTube
    interval: 86400
  Spotify:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Ruleset/Spotify.yaml'
    path: ./Ruleset/Spotify
    interval: 86400
  TikTok:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Ruleset/TikTok.yaml'
    path: ./Ruleset/Media/TikTok
    interval: 86400
  US Media:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Ruleset/US%20Media.yaml'
    path: ./Ruleset/US Media
    interval: 86400
  UK Media:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Ruleset/UK%20Media.yaml'
    path: ./Ruleset/UK Media
    interval: 86400
  JP Media:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Ruleset/JP%20Media.yaml'
    path: ./Ruleset/JP Media
    interval: 86400
  KR Media:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Ruleset/KR%20Media.yaml'
    path: ./Ruleset/KR Media
    interval: 86400
  SG Media:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Ruleset/SG%20Media.yaml'
    path: ./Ruleset/SG Media
    interval: 86400
  HK Media:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Ruleset/HK%20Media.yaml'
    path: ./Ruleset/HK Media
    interval: 86400
  TW Media:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Ruleset/TW%20Media.yaml'
    path: ./Ruleset/TW Media
    interval: 86400
  WW Media:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Ruleset/WW%20Media.yaml'
    path: ./Ruleset/WW Media
    interval: 86400
  AsianMedia:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Ruleset/AsianMedia%20Media.yaml'
    path: ./Ruleset/AsianMedia
    interval: 86400
  PayPal:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Ruleset/PayPal.yaml'
    path: ./Ruleset/PayPal
    interval: 86400
  ExclusiveWW:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Ruleset/WW.yaml'
    path: ./Ruleset/ExclusiveWW
    interval: 86400
  WW:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Ruleset/WW.yaml'
    path: ./Ruleset/WW
    interval: 86400
  Scholar:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Ruleset/Scholar.yaml'
    path: ./Ruleset/Scholar
    interval: 86400
  ChinaMedia:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Ruleset/ChinaMedia.yaml'
    path: ./Ruleset/ChinaMedia
    interval: 86400
  China:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Ruleset/China.yaml'
    path: ./Ruleset/China
    interval: 86400
  ChinaIP:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Ruleset/ChinaIP.yaml'
    path: ./Ruleset/ChinaIP
    interval: 86400
  LAN:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Ruleset/LAN.yaml'
    path: ./Ruleset/LAN
    interval: 86400   